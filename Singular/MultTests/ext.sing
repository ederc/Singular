int @@@DEBUG@@@ = 1;

LIB "tst.lib"; 

system("--min-time", "0.01");
system("--ticks-per-sec", 100);


// system("NCUseExtensions");
proc BeforeTest()
{
  tst_init();
}

proc AfterTest()
{
  tst_status(1);
}


proc TestMult(int v, int S, int N, int M, int MM)
{
  int k, i, j, l; poly tt;
  int step = 1;

  if( S > N ){ step = -1; }
  
  int tBegin, tFinish;
  if( v == 1 )
  {
    "&&&&&&&&&& TEST MULT: y^i * x, i being from: " + string(S) + "..." + string(N), " (repeat: ", M, ")";
    BeforeTest();    
    tBegin=timer;
    for( k = MM; k>0; k-- )
    {
    for( i = 1; i <= N; i = i + step )
    {
      for(j = M; j>0; j--) { tt = var(2)^i * var(1); }
    }
    }
    tFinish=timer;
    AfterTest();
  } 
  if( v == 2 )
  {
    "&&&&&&&&&& TEST MULT: y * x^i, i being from : " + string(S) + "..." + string(N), " (repeat: ", M, ")";
    BeforeTest();
    tBegin=timer;
    for( k = MM; k>0; k-- )
    {
    for( i = 1; i <= N; i = i + step )
    {
      for(j = M; j>0; j--) { tt = var(2) * var(1)^i; }
    }
    }
    tFinish=timer;
    AfterTest();
  }
  
  if( v == 3 )
  {
    i = S;
    j = N;
    k = M;
    
    "&&&&&&&&&& TEST MULT:  y^i * (y^j *x^k) - y^{i+j)*x^k, i: ", i, ", ", j, ", k: ", k, " (repeat: ", MM, " times)";
    BeforeTest();
    tBegin=timer;
    for( l = MM; l > 0; l-- )
    {
      tt = var(2)^i * (var(2)^j * var(1)^k) - (var(2)^(i+j)) * var(1)^k;
    }
    tFinish=timer;
    AfterTest();
  }

  if( v == 4 )
  {
    "&&&&&&&&&& TEST MULT: y^i * x^i, i being from : " + string(S) + "..." + string(N), " (repeat: ", M, ")";
    BeforeTest();
    tBegin=timer;
    for( k = MM; k>0; k-- )
    {
    for( i = 1; i <= N; i = i + step )
    {
      for(j = M; j>0; j--) { tt = var(2)^i * var(1)^i; }
    }
    }
    tFinish=timer;
    AfterTest();
  }
  
  
  i = (tFinish - tBegin);
  "Timer => ", i;
  "Last product: ", tt;
  return( i );

}



proc Test()
{
  def save = basering;
  list rrr = ringlist(save);

  def r1 = ring(rrr); setring r1; 
  "======>>>>>>  1: ", TestMult(1, 20, 20, 1, 1); 
  kill r1; setring save;

  def r1 = ring(rrr); setring r1; 
  "======>>>>>>  2: ", TestMult(2, 20, 20, 1, 1);
  kill r1; setring save;

  def r1 = ring(rrr); setring r1; 
  "======>>>>>>  4: ", TestMult(4, 20, 20, 1, 1); 
  kill r1; setring save;
  
  def r1 = ring(rrr); setring r1; 
  "======>>>>>>  3: ", TestMult(3, 5, 5, 5, 1);
  kill r1; setring save;


}

ring C = (0,q,a,b,g),(x,y),dp;
def  A = nc_algebra(q, a*x + b*y + g);
setring A; 


Test();

// change the defaults...
system("NCMultTest", 1, 0); // bNoPluralMultiplication
system("NCMultTest", 2, 0); // bNoCache
system("NCMultTest", 3, 1); // bNoFormulae
// tested setting: 1 (no caches...?)

setring C;
def  B = nc_algebra(q, a*x + b*y + g);
setring B;

Test();


$



